#!/bin/bash

vMAJOR=0
vMINOR=6

VERSION=${vMAJOR}.${vMINOR}

SCRIPT=$(basename $BASH_SOURCE)

rd='\e[0;31m'
gr='\e[0;32m'
yl='\e[0;33m'
bl='\e[0;34m'
nc='\e[0m' # no color

#Hardware information data to import
HW_DATA_PATH=/etc/platform-info/core

#Setup log file
CPU_LOG_FILE_1=/tmp/agl-benchmark.testcpu1.log
CPU_LOG_FILE_2=/tmp/agl-benchmark.testcpu2.log
CPU_LOG_FILE_3=/tmp/agl-benchmark.testcpu3.log
CPU_LOG_FILE_4=/tmp/agl-benchmark.testcpu4.log
CPU_LOG_FILE_5=/tmp/agl-benchmark.testcpu5.log
RAM_LOG_FILE_W=/tmp/agl-benchmark.testram_write.log
RAM_LOG_FILE_R=/tmp/agl-benchmark.testram_read.log
GPU_LOG_FILE=/tmp/agl-benchmark.testgpu.log

#CPU weight is used to smooth the results
CPU_SCORE1_WEIGHT=2
CPU_SCORE2_WEIGHT=8
CPU_SCORE3_WEIGHT=20
CPU_SCORE4_WEIGHT=1
CPU_SCORE5_WEIGHT=1/2

#Used to reduce/increase weight of a categorie
CPU_WEIGHT=50
RAM_WEIGHT=50
GPU_WEIGHT=50
WEIGHT=$(($CPU_WEIGHT+$RAM_WEIGHT+$GPU_WEIGHT))

function usage() {
	cat <<EOF >&2
Usage: $SCRIPT [options]

Options:
   -s|--show-details
      show hardware information before doing any tests
   -n|--no-gpu
      exclude the gpu test of the benchmark
   -v|--verbose
      show all output messages
      default: off
   -h|--help
      get this help

EOF
	exit 1
}

TEMP=$(getopt -o s,n,v,h -l show-details,no-gpu,verbose,help -n $SCRIPT -- "$@")
[[ $? != 0 ]] && usage
eval set -- "$TEMP"

#default options values
VERBOSE=0
SHOW_DETAILS=0
EXCLUDE_GPU_TEST=0

while true; do
	case "$1" in
		-s|--show-details) SHOW_DETAILS=1; shift ;;
		-n|--no-gpu) EXCLUDE_GPU_TEST=1; shift ;;
		-v|--verbose) VERBOSE=1; shift ;;
		-h|--help) HELP=1; shift ;;
		--) shift; break;;
		*) error "Internal error"; exit 1;;
	esac
done

[[ "$HELP" == 1 ]] && usage

#Manage verbosity
if [ $VERBOSE -eq 1 ]
then
	VERBOSITY_LOG_TOKEN="|& tee"
else
	VERBOSITY_LOG_TOKEN="&>"
fi

function clean()
{
	[[ -f $CPU_LOG_FILE_1 ]] && rm $CPU_LOG_FILE_1
	[[ -f $CPU_LOG_FILE_2 ]] && rm $CPU_LOG_FILE_2
	[[ -f $CPU_LOG_FILE_3 ]] && rm $CPU_LOG_FILE_3
	[[ -f $CPU_LOG_FILE_4 ]] && rm $CPU_LOG_FILE_4
	[[ -f $CPU_LOG_FILE_5 ]] && rm $CPU_LOG_FILE_5

	[[ -f $RAM_LOG_FILE_W ]] && rm $RAM_LOG_FILE_W
	[[ -f $RAM_LOG_FILE_R ]] && rm $RAM_LOG_FILE_R

	[[ -f $GPU_LOG_FILE ]] && rm $GPU_LOG_FILE
}

function sys_info()
{
	#Start by identifying general system information

	echo -en " Scanning hardware..."
	[[ ! -f $HW_DATA_PATH ]] && echo -ne "\n$yl Warning: Could not find harware information: $nc$HW_DATA_PATH$yl is missing.$nc\n"
	source $HW_DATA_PATH &> /dev/null

	#CPU information
	CPU_NAME=$HW_SOC_VENDOR" "$HW_SOC_FAMILY" "$HW_SOC_ID && [[ $CPU_NAME == "  " ]] && CPU_NAME="unknown"
	CPU_ARCH=$HW_CPU_ARCH && [[ ! $CPU_ARCH ]] && CPU_ARCH=`uname -m` && [[ ! $CPU_ARCH ]] && CPU_ARCH="?"
	CPU_NB_ONLINE_CORE=$(cat /proc/cpuinfo | grep -i "^processor" | wc -l) && [[ ! $CPU_NB_ONLINE_CORE ]] && CPU_NB_ONLINE_CORE="?"
	CPU_MAX_CORE=$HW_CPU_COUNT && [[ ! $CPU_MAX_CORE ]] && CPU_MAX_CORE="?"
	CPU_FREQ=$HW_CPU_FREQ_MHZ && [[ ! $CPU_FREQ ]] && CPU_FREQ="?"
	CPU_CACHE_SIZE=$HW_CPU_CACHE_KB && [[ ! $CPU_CACHE_SIZE ]] && CPU_CACHE_SIZE="?"
	CPU_BOGO_MIPS=$(cat /proc/cpuinfo | grep -i -m1 "^bogomips" | awk -F": " '{print $2}') && [[ ! $CPU_BOGO_MIPS ]] && $CPU_BOGO_MIPS="?"

	#RAM and MEM information
	if [ "$CPU_ARCH" == "aarch64" ]
	then
		RAM_NAME="unknown"
		MEM_SIZE=$HW_MEMORY_TOTAL_MB && [[ ! $MEM_SIZE ]] && MEM_SIZE="?"
		MEM_SPEED="?"
	else
		dmidecode --type 17 &> /tmp/raminfo.log
		RAM_BRAND=$(grep -i -m1 "Manufacturer" /tmp/raminfo.log | awk -F": " '{print $2}')
		RAM_PN=$(grep -i -m1 "Part Number" /tmp/raminfo.log | awk -F": " '{print $2}')
		RAM_NAME=$RAM_BRAND" "$RAM_PN && [[ $RAM_NAME == " " ]] && RAM_NAME="unknown"
		MEM_SIZE=$HW_MEMORY_TOTAL_MB && [[ ! $MEM_SIZE ]] && MEM_SIZE="?"
		MEM_SPEED=$(grep -i -m1 "Speed" /tmp/raminfo.log | awk -F": " '{print $2}') && [[ ! $MEM_SPEED ]] && MEM_SPEED="?"
	fi

	#GPU information
	GPU_NAME=$HW_GPU_NAME && [[ ! $GPU_NAME ]] && GPU_NAME="unknown"
	GPU_FREQ=$HW_GPU_FREQ_MHZ && [[ ! $GPU_FREQ ]] && GPU_FREQ="?"

	if [[ "$SHOW_DETAILS" == 1 ]]
	then
		echo -en "\r Hardware information :\n"
		echo -e " * CPU : $CPU_NAME"
		echo -e "   - Arch  : $CPU_ARCH"
		echo -e "   - Cores : $CPU_NB_ONLINE_CORE/$CPU_MAX_CORE"
		echo -e "   - Freq  : $CPU_FREQ MHz"
		echo -e "   - Cache : $CPU_CACHE_SIZE KB"
		echo -e "   - Bogo  : $CPU_BOGO_MIPS MIPS"

		echo -e " * RAM : $RAM_NAME"
		echo -e "   - Size  : $MEM_SIZE MB"
		echo -e "   - Speed : $MEM_SPEED"

		echo -e " * GPU : $GPU_NAME"
		echo -e "   - Freq  : $GPU_FREQ MHz"
		echo    ""
	else
		echo -en " OK.\n\n"
	fi
}

function print_result()
{
	if [ $1 == "CPU" ]
	then
		CPU_LOG_FILE=CPU_LOG_FILE_$2
		declare -g CPU_SCORE$2=$(grep "] cpu" ${!CPU_LOG_FILE} | awk -F"] cpu" '{print $2}' | sed -e 's/^[ \t]*//' | awk -F" " '{print $5}' | cut -d'.' -f1)

		if [ $2 == "1" ]
		then
			echo -en "\r * CPU Results :  \n"
			printf "   - Stress-ng : $gr%5s $nc($CPU_NB_ONLINE_CORE core(s))\n" $(($CPU_SCORE1*$CPU_SCORE1_WEIGHT))
		elif [ $2 == "2" ]
		then
			printf "\r   - Stress-ng : $gr%5s $nc(1 core)\n" $(($CPU_SCORE2*$CPU_SCORE2_WEIGHT))
		elif [ $2 == "3" ]
		then
			printf "\r   - Stress-ng : $gr%5s $nc(crc16)\n" $(($CPU_SCORE3*$CPU_SCORE3_WEIGHT))
		elif [ $2 == "4" ]
		then
			printf "\r   - Stress-ng : $gr%5s $nc(cfloat)\n" $(($CPU_SCORE4*$CPU_SCORE4_WEIGHT))
		elif [ $2 == "5" ]
		then
			printf "\r   - Stress-ng : $gr%5s $nc(double)\n" $(($CPU_SCORE5*$CPU_SCORE5_WEIGHT))
		fi
	elif [ $1 == "RAM" ]
	then
		if [ $2 == "1" ]
		then
			echo -en "\r * RAM Results :  \n"
			RAM_SCORE_W=$(tail -1 $RAM_LOG_FILE_W | cut -d' ' -f6)
			printf "\r   - Write (dd): $gr%5s $nc(MB/s)\n" $RAM_SCORE_W
		elif [ $2 == "2" ]
		then
			RAM_SCORE_R=$(tail -1 $RAM_LOG_FILE_R | cut -d' ' -f6)
			printf "\r   - Read  (dd): $gr%5s $nc(MB/s)\n" $RAM_SCORE_R
		fi
	elif [ $1 == "GPU" ]
	then
		#Show activity while waiting for GPU test to end
		while [ -d /proc/$GPU_TEST_PID ]; do
			sleep 1
			echo -ne "\r * GPU Testing   "
			sleep 1
			echo -ne "\r * GPU Testing.  "
			sleep 1
			echo -ne "\r * GPU Testing.. "
			sleep 1
			echo -ne "\r * GPU Testing..."
		done;
		GPU_SCORE=$(grep "glmark2 Score" $GPU_LOG_FILE | awk -F": " '{print $2}' | cut -d' ' -f1)
		echo -en "\r * GPU Results :  \n"
		printf "\r   - glmark2   : $gr%5s$nc\n" $GPU_SCORE
	fi
}

# Function to test the RAM
# Description: The test will mount a tmpfs filesystem in RAM
# and use dd bash command to write/read data into/from it.
# $1: Size of RAM to test
# $2: Nb of retry to afine the results
function do_ram_test()
{
	#Init local args
	local size=$1
	local nb_retry=$2

	#Check if enought memory is free
	local free=$(bc <<< `cat /proc/meminfo | grep MemFree | sed 's/[^0-9]//g'`/1000)
	if [ $free -lt $size ]
	then
		echo "ERROR: Not enought memory. Only $free/$size MB is available."
		exit 1
	fi

	#Create and mount a tmpfs filesystem with the given size
	mkdir -p /mnt/ram_test
	mount -t tmpfs -o size=${size}M tmpfs /mnt/ram_test

	#Do n write test of memory
	echo -en " * RAM Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	for n in `seq 1 $nb_retry`
	do
		dd if=/dev/zero of=/mnt/ram_test/test bs=1M conv=fsync &>> $RAM_LOG_FILE_W
	done

	#Calculate write result average in MB/s
	local result=0
	for time in `grep "copied" $RAM_LOG_FILE_W | cut -d' ' -f8`
	do
		local n=$(bc <<< $size/$time)
		result=$(($result+$n))
	done
	eval echo "RAM write speed average : $(($result/$nb_retry)) MB/s" $VERBOSITY_LOG_TOKEN $RAM_LOG_FILE_W

	print_result "RAM" "1"

	#Do read test of memory
	echo -en " * RAM Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	for n in `seq 1 $nb_retry`
	do
		dd if=/mnt/ram_test/test of=/dev/null bs=1M conv=fsync &>> $RAM_LOG_FILE_R
	done

	#Calculate read result average in MB/s
	local result=0
	for time in `grep "copied" $RAM_LOG_FILE_R | cut -d' ' -f8`
	do
		local n=$(bc <<< $size/$time)
		result=$(($result+$n))
	done
	eval echo "RAM read speed average : $(($result/$nb_retry)) MB/s" $VERBOSITY_LOG_TOKEN $RAM_LOG_FILE_R

	print_result "RAM" "2"

	#Clean test files
	rm -f /mnt/ram_test/test
	umount /mnt/ram_test
}

function launch_all_tests()
{
	echo " Start benchmarking..."

	#CPU benchmarking
	echo -en " * CPU Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	eval stress-ng --cpu $CPU_NB_ONLINE_CORE --cpu-method fft --metrics-brief --timeout 5s $VERBOSITY_LOG_TOKEN $CPU_LOG_FILE_1
	print_result "CPU" "1"
	echo -en " * CPU Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	eval stress-ng --cpu 1 --cpu-method fft --metrics-brief --timeout 5s $VERBOSITY_LOG_TOKEN $CPU_LOG_FILE_2
	print_result "CPU" "2"
	echo -en " * CPU Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	eval stress-ng --cpu 1 --cpu-method crc16 --metrics-brief --timeout 5s $VERBOSITY_LOG_TOKEN $CPU_LOG_FILE_3
	print_result "CPU" "3"
	echo -en " * CPU Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	eval stress-ng --cpu 1 --cpu-method cfloat --metrics-brief --timeout 1s $VERBOSITY_LOG_TOKEN $CPU_LOG_FILE_4
	print_result "CPU" "4"
	echo -en " * CPU Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
	eval stress-ng --cpu 1 --cpu-method double --metrics-brief --timeout 1s $VERBOSITY_LOG_TOKEN $CPU_LOG_FILE_5
	print_result "CPU" "5"

	#RAM benchmarking
	do_ram_test 500 10

	#GPU benchmarking
	if [ $EXCLUDE_GPU_TEST -eq 0 ]
	then
		echo -en " * GPU Testing..." && [[ $VERBOSE -eq 1 ]] && echo ""
		#Test is long so put it in background to be able show activity when waiting the end
		eval glmark2-es2-wayland --off-screen $VERBOSITY_LOG_TOKEN $GPU_LOG_FILE&
		GPU_TEST_PID=$!
		print_result "GPU"
	else
		GPU_SCORE=0
	fi

	echo ""
}

function compute_print_score()
{
	#Calculate the score by ajusting them with the predefined weight
	MOY_CPU_SCORE=$((($CPU_SCORE1*$CPU_SCORE1_WEIGHT+$CPU_SCORE2*$CPU_SCORE2_WEIGHT+$CPU_SCORE3*$CPU_SCORE3_WEIGHT+$CPU_SCORE4*$CPU_SCORE4_WEIGHT+$CPU_SCORE5*$CPU_SCORE5_WEIGHT)/5))
	AGL_CPU_SCORE=$(($MOY_CPU_SCORE*$CPU_WEIGHT/$WEIGHT))
	MOY_RAM_SCORE=$((($RAM_SCORE_W+$RAM_SCORE_R)/2))
	AGL_RAM_SCORE=$(($MOY_RAM_SCORE*$RAM_WEIGHT/$WEIGHT))
	AGL_GPU_SCORE=$(($GPU_SCORE*$GPU_WEIGHT/$WEIGHT))
	
	AGL_SCORE=$(($AGL_CPU_SCORE+$AGL_RAM_SCORE+$AGL_GPU_SCORE))

	echo -e "$rd######################################"
	printf "#$nc Your AGL Benchmarking score: $gr%5s $rd#\n" $AGL_SCORE
	echo -e "$rd######################################"
	printf "#$nc Score details:                     $rd#\n"
	printf "#$nc  * CPU: $gr%5s                      $rd#\n" $AGL_CPU_SCORE
	printf "#$nc  * RAM: $gr%5s                      $rd#\n" $AGL_RAM_SCORE
	[[ $EXCLUDE_GPU_TEST -eq 0 ]] && printf "#$nc  * GPU: $gr%5s                      $rd#\n" $AGL_GPU_SCORE
	echo -e "$rd######################################$nc"
}

###############################################################################################


echo -e "$rd######################################"
echo -e "#$nc   AGL Benchmarking script - v$VERSION   $rd#"
echo -e "$rd######################################$nc\n"

#Clean first
clean

#Print system information if requested
sys_info

#Start the benchmark
launch_all_tests

#Calculate and print the final score and summary
compute_print_score


exit 0
