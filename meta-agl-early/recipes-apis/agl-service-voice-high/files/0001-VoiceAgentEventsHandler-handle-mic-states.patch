From e9f8be8aec5987130be8d00946096cb8b7e4977b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20B=C3=A9nier?= <clement.benier@iot.bzh>
Date: Mon, 31 Dec 2018 19:42:53 +0100
Subject: [PATCH 1/1] VoiceAgentEventsHandler: handle mic states
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: Ib3bd41ca6cf81441325955f0934cc23b0ce88a77
Signed-off-by: ClÃ©ment BÃ©nier <clement.benier@iot.bzh>
Signed-off-by: Clément Bénier <clement.benier@iot.bzh>
---
 conf.d/wgt/config.xml.in                      |  3 +-
 .../src/VoiceAgentEventsHandler.cpp           | 46 +++++++++++++++++++
 2 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/conf.d/wgt/config.xml.in b/conf.d/wgt/config.xml.in
index d79c222..37a7625 100644
--- a/conf.d/wgt/config.xml.in
+++ b/conf.d/wgt/config.xml.in
@@ -14,9 +14,10 @@
   </feature>
   <feature name="urn:AGL:widget:required-api">
     <param name="alexa-voiceagent" value="ws" />
+    <param name="4a-hal-rcar-m3kf-unicens" value="ws" />
   </feature>
   <feature name="urn:AGL:widget:required-permission">
     <param name="urn:AGL:permission:afm:system:widget:start" value="required" />
     <param name="urn:AGL:permission::public:hidden" value="required" />
   </feature>
-</widget>
\ No newline at end of file
+</widget>
diff --git a/src/plugins/voiceagents/src/VoiceAgentEventsHandler.cpp b/src/plugins/voiceagents/src/VoiceAgentEventsHandler.cpp
index 4952721..cb30f70 100644
--- a/src/plugins/voiceagents/src/VoiceAgentEventsHandler.cpp
+++ b/src/plugins/voiceagents/src/VoiceAgentEventsHandler.cpp
@@ -13,6 +13,7 @@
  * permissions and limitations under the License.
  */
 #include "voiceagents/include/VoiceAgentEventsHandler.h"
+#include <json-c/json.h>
 
 static string TAG = "vshl::voiceagents::VoiceAgentEventsHandler";
 static string VA_VERB_SUBSCRIBE = "subscribe";
@@ -100,6 +101,51 @@ bool VoiceAgentEventsHandler::subscribeToVshlEventFromVoiceAgent(
 // IEventFilter override.
 bool VoiceAgentEventsHandler::onIncomingEvent(const string eventName, const string voiceAgentId, const string payload) {
     string eventNameWithVAId = createEventNameWithVAId(eventName, voiceAgentId);
+    if(eventName == "voice_dialogstate_event") {
+        struct json_object *jpayload = json_tokener_parse(json_object_get_string(json_object_new_string(payload.c_str())));
+        std::string error, info;
+        json_object *object = json_object_new_object(), *jstate;
+        json_object *color = json_object_new_object();
+        json_object *dark = json_object_new_object();
+        json_object *light = json_object_new_object();
+        json_object *cerror = json_object_new_object();
+        json_object_object_add(color, "dark", dark);
+        json_object_object_add(color, "light", light);
+        json_object_object_add(color, "error", cerror);
+        json_object_object_add(cerror, "red", json_object_new_int(255));
+        json_object_object_add(cerror, "green", json_object_new_int(0));
+        json_object_object_add(cerror, "blue", json_object_new_int(0));
+        json_object_object_add(dark, "red", json_object_new_int(0));
+        json_object_object_add(dark, "green", json_object_new_int(0));
+        json_object_object_add(dark, "blue", json_object_new_int(255));
+
+
+        json_object_object_get_ex(jpayload, "state", &jstate);
+        std::string state(json_object_get_string(jstate));
+        if(state == "LISTENING") {
+            json_object_object_add(light, "red", json_object_new_int(0));
+            json_object_object_add(light, "green", json_object_new_int(255));
+            json_object_object_add(light, "blue", json_object_new_int(0));
+            json_object_object_add(object, "mode", json_object_new_string("listening"));
+        } else if(state == "THINKING") {
+            json_object_object_add(light, "red", json_object_new_int(0));
+            json_object_object_add(light, "green", json_object_new_int(255));
+            json_object_object_add(light, "blue", json_object_new_int(130));
+            json_object_object_add(object, "mode", json_object_new_string("processing"));
+        } else if(state == "SPEAKING") {
+            json_object_object_add(light, "red", json_object_new_int(0));
+            json_object_object_add(light, "green", json_object_new_int(130));
+            json_object_object_add(light, "blue", json_object_new_int(130));
+            json_object_object_add(object, "mode", json_object_new_string("processing"));
+        } else {
+            json_object_object_add(light, "red", json_object_new_int(0));
+            json_object_object_add(light, "green", json_object_new_int(0));
+            json_object_object_add(light, "blue", json_object_new_int(255));
+            json_object_object_add(object, "mode", json_object_new_string("idle"));
+        }
+        mAfbApi->callSync("4a-hal-rcar-m3kf-unicens", "set_md_mic_mode", object, NULL, error, info);
+        mAfbApi->callSync("4a-hal-rcar-m3kf-unicens", "set_md_mic_color_scheme", color, NULL, error, info);
+    }
     auto it = mEventsMap.find(eventNameWithVAId);
     if (it != mEventsMap.end()) {
         return it->second->publishEvent(json_object_new_string(payload.c_str()));
-- 
2.20.1

