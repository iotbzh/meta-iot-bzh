#!/bin/bash

set -e

MYNAME=$(basename $BASH_SOURCE)

shout_default=/etc/platform-info/hardware
shout=$shout_default
jsonout_default=/etc/platform-info/hardware.json
jsonout=$jsonout_default
fragdir_default=$(cd $(dirname $(realpath $BASH_SOURCE))/$MYNAME.d && pwd -P)
fragdir=$fragdir_default

function info() { echo "$(basename $BASH_SOURCE) - $@" >&2; }
function error() { echo "$(basename $BASH_SOURCE) - ERROR: $@" >&2; }

# ------------------------ SH/JSON output funcs ------------------------

# usage:
# OBJ1=$(out_object json <<EOF
# key1
# value1
# key2
# value2
# EOF)
# 
# ARR1=$(out_object json <<EOF
# item1
# item2
# item3
# EOF)
#
# VAL1=$(out_value json "foo")

function out() { echo -n "$@"; }
function out_object() {
	# expected stdin stream is:
	# --------------
	# key
	# value
	# key
	# value
	# ...
	# --------------
	local sep=""
	local k
	local fmt=${1:-bash}
	case $fmt in
		bash)
			while read x; do
				[[ -z "$k" ]] && { k="$x"; continue; }
				out "$sep${k}="
				out_value $fmt "$x"
				sep=$'\n'
				k=
			done
			out "$sep"
			;;
		json)
			out "{"
			while read x; do
				[[ -z "$k" ]] && { k="$x"; continue; }
				out "$sep\"${k}\":"
				out_value $fmt "$x"
				sep=","
				k=
			done
			out "}"
			;;
	esac
}

function out_array() {
	# expected stdin stream is:
	# --------------
	# value
	# value
	# ...
	# --------------
	local sep=""
	local fmt=${1:-bash}
	case $fmt in
		bash)
			while read x; do
				out "$sep"
				out_value $fmt "$x"
				sep=" "
			done
			;;
		json)
			out "["
			while read x; do
				out $sep
				out_value $fmt "$x"
				sep=","
			done
			out "]"
			;;
	esac
}

function out_value() {
	# string
	# number
	# object
	# array
	# 'true'
	# 'false'
	# 'null'

	local fmt=${1:-bash}
	x=$2

	# litterals
	if [[ "$x" =~ ^(true|false|null)$ ]]; then
		out "$x"
	# number
	elif [[ "$x" =~ ^[+-]?[0-9]+(\.[0-9]+)?$ ]]; then
		out "$x"
	# object
	elif [[ "$x" =~ ^\{.*\}$ ]]; then
		out "$x"
	# array
	elif [[ "$x" =~ ^\[.*\]$ ]]; then
		out "$x"
	# string
	else
		out "\"$(sed 's/\("\)/\\\1/g' <<<$x)\""
	fi
}

# --------------------------------------------------------------

function __usage() {
	cat <<EOF >&2
Usage: $MYNAME <option>
   Options:
      -h|--help: output this help
	  -o|--output-file <file>: generate output file in SHELL format (default: $shout_default)
	  -j|--json-file <file>: generate output file in JSON format (default: $jsonout_default)
	  -d|--fragments-dir <dir>: specify location of fragments to execute (default: $fragdir_default)
EOF
}

tmp=$(getopt -o h,o:,j:,b --long help,mode:,output-file:,json-file: -n "$MYNAME" -- "$@") || {
	error "Invalid arguments."
	__usage
	exit 1
}
eval set -- $tmp

while true; do
	case "$1" in
		-h|--help) __usage; exit 0;;
		-o|--output-file) shout=$2; shift 2;;
		-j|--json-file) jsonout=$2; shift 2;;
		-d|--fragments-dir) fragdir=$2; shift 2;;
		--) shift; break;;
		*) fatal "Internal error";;
	esac
done

[[ -f $shout ]] && rm $shout
[[ -f $jsonout ]] && rm $jsonout

info "Generating shell format in $shout"
info "Generating json format in $jsonout"

declare -A __keys

function addkey() {
	local k=$1
	shift
	[[ -z "$k" ]] && return 1
	__keys[$k]="$@"
}

# run all fragments in specified fragment dir
[[ ! -d $fragdir ]] && { error "Invalid fragments dir '$fragdir'."; exit 1; }
for x in $(ls $fragdir/??[._]* 2>/dev/null); do
	info "Executing $x"
	. $x
done

function __generate_output() {
	fmt=$1
	for x in ${!__keys[@]}; do
		case $fmt in
			bash)
				echo HW_${x^^}
				;;
			*)
				echo $x
				;;
		esac
		echo ${__keys[$x]}
	done | out_object $fmt
}
__generate_output bash >$shout
__generate_output json >$jsonout

